<html DIR="LTR" xmlns:MSHelp="http://msdn.microsoft.com/mshelp" xmlns:ddue="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:tool="http://www.microsoft.com/tooltip"><head><META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=Windows-1252"></META><META NAME="save" CONTENT="history"></META><title>Testing Scenario Questions</title><link rel="stylesheet" type="text/css" href="../local/Classic.css"></link><script src="../local/script.js"></script></head><body><div><input type="hidden" id="userDataCache" class="userDataStyle"></input><input type="hidden" id="hiddenScrollOffset"></input></div><img id="dropDownImage" style="display:none; height:0; width:0;" src="../local/drpdown.gif"></img><img id="dropDownHoverImage" style="display:none; height:0; width:0;" src="../local/drpdown_orange.gif"></img><img id="collapseImage" style="display:none; height:0; width:0;" src="../local/collapse.gif"></img><img id="expandImage" style="display:none; height:0; width:0;" src="../local/exp.gif"></img><img id="copyImage" style="display:none; height:0; width:0;" src="../local/copycode.gif"></img><img id="copyHoverImage" style="display:none; height:0; width:0;" src="../local/copycodeHighlight.gif"></img><div id="header"><table width="100%" id="topTable"><tr id="headerTableRow1"><td align="left"><span id="runningHeaderText"></span></td></tr><tr id="headerTableRow2"><td align="left"><span id="nsrTitle">Testing Scenario Questions</span></td></tr><tr id="headerTableRow3"><td></td></tr></table></div><div id="mainSection"><div id="mainBody"><div id="allHistory" class="saveHistory" onsave="saveAll()" onload="loadAll()"></div><p>Following is a list of questions received around different testing scenarios. Click on the question to see the response: </p><p><a href="#enableonservice">How can I enable Application Verifier on my service but not others?</a></p><p><a href="#runon64">How do I run Application Verifier on a 64-bit application that is launched from a 32-bit application running under WOW64?</a></p><p><a href="#debugservice">How do I debug my service that runs in a non-interactive window station?</a></p><p><a href="#leak">Does AppVerifier do leak detection?</a></p><p><a href="#securitytests">Which tests are recommended for security concerns?</a></p><p></p><a name="enableonservice" xmlns:ms="urn:schemas-microsoft-com:xslt" xmlns:cs="urn:the-xml-files:xslt-cs"></a><a name="enableonservice"></a><h2 class="heading">How can I enable Application Verifier on my service but not others?</h2><div id="sectionSection0" class="section"><content xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"><p xmlns="">Make a copy of svchost.exe in the System32 directory and call the copy “Mysvchost.exe”.</p><p xmlns="">Using regedit, open HKLM\System\CurrentControlSet\Services\MyService.</p><p xmlns="">Edit the value “ImagePath”, which will be something like “%SystemRoot%\system32\svchost.exe -k myservice” and change svchost.exe to “Mysvchost.exe”.</p><p xmlns="">Add “Mysvchost.exe” to the AppVerifier list and check the tests desired.</p><p xmlns="">Reboot.</p></content></div><a name="runon64" xmlns:ms="urn:schemas-microsoft-com:xslt" xmlns:cs="urn:the-xml-files:xslt-cs"></a><a name="runon64"></a><h2 class="heading">How do I run Application Verifier on a 64-bit application that is launched from a 32-bit application running under WOW64?</h2><div id="sectionSection1" class="section"><content xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"><p xmlns="">Simple version: The golden rule for enabling verifier settings on a given application is to match the bit-ness of the tool and the target process. That is: use the 32-bit appverif.exe for a 32-bit application (both running under WoW64) and use the 64-bit AppVerif.exe for the native 64-bit native target. </p><p xmlns="">Long Version: Application Verifier settings are the proper union of "core" settings and "shim" settings. </p><p xmlns=""><b>Core settings</b></p><p xmlns="">Core settings are stored under Image File Execution Options.</p><p xmlns="">The "Debugger" value is read from the launching application. So, if you want to have 32-bit devenv.exe launching 64-bit my.exe and have it running under debugger, you must use the 32-bit registry key under WoW6432Node. The other values, for a 32-bit process, are read from both places, both the native IFEO and the WoW6432Node.</p><p xmlns="">The reasoning is the following: a 32-bit process running under WoW is a 64-bit process running the Wow64 emulation loop. So, each 32-bit process is first a 64-bit process, and then a 32-bit process. The 64-bit IFEO will enable verifier on the Wow64cpu.dll code, while the 32-bit IFEO will enable verifier on the 32-bit code.</p><p xmlns="">From the end-user point of view, verifier.dll is loaded twice (once in the 64-bit world, once in the 32-bit world). Since most of the people do not care about verifying wow64cpu.dll, the most accepted behavior for 32-bit processes is to only verify the 32-bit part. That is why the golden rule of "always match the bit-ness" applies. </p></content></div><a name="debugservice" xmlns:ms="urn:schemas-microsoft-com:xslt" xmlns:cs="urn:the-xml-files:xslt-cs"></a><a name="debugservice"></a><h2 class="heading">How do I debug my service that runs in a non-interactive window station</h2><div id="sectionSection2" class="section"><content xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"><p xmlns="">To debug a service that runs in a non-interactive window station, do the following (only applies if you’re using ntsd/windbg): </p><p xmlns="">Add a key to the registry under HKLM\Software\Microsoft\Windows NT\CurrentVersion\Image File Execution Options. The name of this key should be the name of the process (service.exe). </p><p xmlns="">Create a REG_SZ value called Debugger and set this value to the path where your debugger resides. It must contain the full path, not just the name of the debugger. The command should include the –server option and a specific port or port range that the debugger should listen on. An example is c:\debuggers\ntsd.exe –server tcp:port=5500:5600 –g –G. </p><p xmlns="">Connect to the debugger server by running the debugger with a –remote option. An example is: windbg.exe –remote tcp:=localhost,port=55xx where ‘xx’ is some number from 00 to 99 if you used a range on the server. </p></content></div><a name="leak" xmlns:ms="urn:schemas-microsoft-com:xslt" xmlns:cs="urn:the-xml-files:xslt-cs"></a><a name="leak"></a><h2 class="heading">Does AppVerifier do leak detection?</h2><div id="sectionSection3" class="section"><content xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"><p xmlns="">Under Windows 7 and greater, there is a Leaks check option that will detect when a process leaks memory.  Under earlier operating systems, AppVerifier does not test application for leak detection but looks for other memory issues.</p></content></div><a name="securitytests" xmlns:ms="urn:schemas-microsoft-com:xslt" xmlns:cs="urn:the-xml-files:xslt-cs"></a><a name="securitytests"></a><h2 class="heading">Which tests are recommended for security concerns?</h2><div id="sectionSection4" class="section"><content xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"><ul xmlns=""><li class="unordered">
Heaps <br /><br /></li><li class="unordered">
Handles <br /><br /></li><li class="unordered">
Locks <br /><br /></li><li class="unordered">
Stacks (only for services and important processes that can take machine down) <br /><br /></li></ul><p xmlns="">Keep in mind that ObsoleteAPICalls will just spit out a warning for every call it sees to an API that is listed as obsolete or deprecated in MSDN. You should decide on a case by case basis if it is important for your application to switch to the new APIs. Some of the APIs are dangerous, and some have merely been superseded by a newer API with more options. Take a look at the "Dangerous APIs" section of 
    <i>Writing Secure Code, 2nd addition</i>
   for more. </p><p xmlns="">For applications that need to be highly reliable, like services and server programs, you should also enable the Stacks check. This checks to see if the stack commit size is adequate, by disabling stack growth. If the application quits immediately with a stack overflow, that means the application needs to be recompiled with a larger stack commit size. If you're a tester, and encounter a problem with an application while using the Stacks check, file a bug, assign it to your developer, and keep on testing.</p></content></div><!--[if gte IE 5]>
			<tool:tip element="languageFilterToolTip" avoidmouse="false"/>
		<![endif]--></div><div id="footer"><p></p><hr></hr><br /><br /></div></div></body></html>