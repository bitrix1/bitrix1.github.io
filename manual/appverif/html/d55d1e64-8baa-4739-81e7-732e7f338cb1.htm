<html DIR="LTR" xmlns:MSHelp="http://msdn.microsoft.com/mshelp" xmlns:ddue="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:tool="http://www.microsoft.com/tooltip"><head><META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=Windows-1252"></META><META NAME="save" CONTENT="history"></META><title>Locks Stop Details</title><link rel="stylesheet" type="text/css" href="../local/Classic.css"></link><script src="../local/script.js"></script></head><body><div><input type="hidden" id="userDataCache" class="userDataStyle"></input><input type="hidden" id="hiddenScrollOffset"></input></div><img id="dropDownImage" style="display:none; height:0; width:0;" src="../local/drpdown.gif"></img><img id="dropDownHoverImage" style="display:none; height:0; width:0;" src="../local/drpdown_orange.gif"></img><img id="collapseImage" style="display:none; height:0; width:0;" src="../local/collapse.gif"></img><img id="expandImage" style="display:none; height:0; width:0;" src="../local/exp.gif"></img><img id="copyImage" style="display:none; height:0; width:0;" src="../local/copycode.gif"></img><img id="copyHoverImage" style="display:none; height:0; width:0;" src="../local/copycodeHighlight.gif"></img><div id="header"><table width="100%" id="topTable"><tr id="headerTableRow1"><td align="left"><span id="runningHeaderText"></span></td></tr><tr id="headerTableRow2"><td align="left"><span id="nsrTitle">Locks Stop Details</span></td></tr><tr id="headerTableRow3"><td></td></tr></table></div><div id="mainSection"><div id="mainBody"><div id="allHistory" class="saveHistory" onsave="saveAll()" onload="loadAll()"></div><p>The Lock Verifier checks for errors (or stops) in the file lock usages. The primary purpose of the Locks test is to ensure that the application uses critical sections properly. <br />Following is a list of verifier stops that may occur when running the lock verifier against a solution or project on different platforms: </p><h3 class="subHeading"></h3><table><tr><td colspan="1"><p><b>Error message</b></p></td><td colspan="1"><p><b>Stop code</b></p></td></tr><tr><td colspan="1"><p><a href="2782aeef-b5c0-41e4-8e84-0017d0bd324d.htm">Thread that is exiting owns a critical section</a></p></td><td colspan="1"><p>0200</p></td></tr><tr><td colspan="1"><p><a href="fd8762d3-f2d1-47b3-9d5f-68776cc2a9cd.htm">Unloading dll containing active critical section</a></p></td><td colspan="1"><p>0201</p></td></tr><tr><td colspan="1"><p><a href="89b029b6-a30c-4a5f-a5f9-39b0660085fd.htm">Freeing heap block containing an active critical section</a></p></td><td colspan="1"><p>0202</p></td></tr><tr><td colspan="1"><p><a href="c6d1c95e-fe54-49f8-92ab-8bf95d1a4c9b.htm">Double initialized or corrupted critical section</a></p></td><td colspan="1"><p>0203</p></td></tr><tr><td colspan="1"><p><a href="36c66c6a-b587-4c48-803a-43546270976e.htm">Free memory containing an active critical section</a></p></td><td colspan="1"><p>0204</p></td></tr><tr><td colspan="1"><p><a href="71fe281b-1f9b-4783-99c7-a871647b3025.htm">Corrupted critical section</a></p></td><td colspan="1"><p>0205</p></td></tr><tr><td colspan="1"><p><a href="2ac703f7-5b3e-47f0-bb24-8e353487c8f6.htm">Invalid critical section owner thread</a></p></td><td colspan="1"><p>0206</p></td></tr><tr><td colspan="1"><p><a href="30d60df5-3a2c-4887-8ebc-394bd9da2ab7.htm">Invalid critical section recursion count</a></p></td><td colspan="1"><p>0207</p></td></tr><tr><td colspan="1"><p><a href="c17b8250-c965-45c0-8611-ec280aa7d417.htm">Deleting critical section with invalid lock count</a></p></td><td colspan="1"><p>0208</p></td></tr><tr><td colspan="1"><p><a href="3644ddd9-dea2-45f5-813a-13b50d33b0ca.htm">Critical section over released or corrupted</a></p></td><td colspan="1"><p>0209</p></td></tr><tr><td colspan="1"><p><a href="bd3846cd-da2b-4b3d-9ea1-461fc28320ed.htm">Critical section not initialized</a></p></td><td colspan="1"><p>0210</p></td></tr><tr><td colspan="1"><p><a href="64bb667f-4086-481a-bc17-d5f869ff85e4.htm">Critical section is already initialized</a></p></td><td colspan="1"><p>0211</p></td></tr><tr><td colspan="1"><p><a href="2f5c93b2-b87e-4bdd-b6fe-aeaa010cc66c.htm">Freeing virtual memory containing an active critical section</a></p></td><td colspan="1"><p>0212</p></td></tr><tr><td colspan="1"><p><a href="cd491df1-61a4-4a7b-aae4-d4f8e4769857.htm">Unmapping memory region containing an active critical section</a></p></td><td colspan="1"><p>0213</p></td></tr><tr><td colspan="1"><p><a href="c418ca01-86a7-484d-b3e9-56067a466a3d.htm">Current thread does not own any critical sections</a></p></td><td colspan="1"><p>0214</p></td></tr><tr><td colspan="1"><p><a href="2568135e-e5a3-42cb-842d-064ee91848f9.htm">Using Critical Section that is Private to Another DLL</a></p></td><td colspan="1"><p>0215</p></td></tr></table><p></p><h2 class="heading">Additional information</h2><div id="sectionSection0" class="section"><content xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"><p xmlns=""> Other details regarding lock checks: </p><ul xmlns=""><li class="unordered">
							Checks for the unload of a DLL that contains an active critical section. This leads to resource leaks. <br /><br /></li><li class="unordered">
							Checks for a heap block free that contains an active critical section. This also leads to resource leaks. <br /><br /></li><li class="unordered">
							Ensures that an application does not attempt to initialize a critical section more than once. This causes undefined behavior. <br /><br /></li><li class="unordered">
							Checks for corruption of a critical section. The DebugInfo field of the critical section must not point to freed memory. <br /><br /></li><li class="unordered">
							Checks for an owner thread ID which is invalid in the current context. <br /><br /></li><li class="unordered">
							Ensures that the recursion count field of the critical section is not invalid in the current context. <br /><br /></li><li class="unordered">
							Checks that the critical section was initialized before being deleted. <br /><br /></li><li class="unordered">
							Ensures that the critical section is not released more times than the current thread acquired it. <br /><br /></li><li class="unordered">
							Checks that the critical section has been initialized prior to being used.<br /><br /></li></ul></content></div><!--[if gte IE 5]>
			<tool:tip element="languageFilterToolTip" avoidmouse="false"/>
		<![endif]--></div><div id="footer"><p></p><hr></hr><br /><br /></div></div></body></html>