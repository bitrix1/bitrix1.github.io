<html DIR="LTR" xmlns:MSHelp="http://msdn.microsoft.com/mshelp" xmlns:ddue="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:tool="http://www.microsoft.com/tooltip"><head><META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=Windows-1252"></META><META NAME="save" CONTENT="history"></META><title>Threadpool Stop Details</title><link rel="stylesheet" type="text/css" href="../local/Classic.css"></link><script src="../local/script.js"></script></head><body><div><input type="hidden" id="userDataCache" class="userDataStyle"></input><input type="hidden" id="hiddenScrollOffset"></input></div><img id="dropDownImage" style="display:none; height:0; width:0;" src="../local/drpdown.gif"></img><img id="dropDownHoverImage" style="display:none; height:0; width:0;" src="../local/drpdown_orange.gif"></img><img id="collapseImage" style="display:none; height:0; width:0;" src="../local/collapse.gif"></img><img id="expandImage" style="display:none; height:0; width:0;" src="../local/exp.gif"></img><img id="copyImage" style="display:none; height:0; width:0;" src="../local/copycode.gif"></img><img id="copyHoverImage" style="display:none; height:0; width:0;" src="../local/copycodeHighlight.gif"></img><div id="header"><table width="100%" id="topTable"><tr id="headerTableRow1"><td align="left"><span id="runningHeaderText"></span></td></tr><tr id="headerTableRow2"><td align="left"><span id="nsrTitle">Threadpool Stop Details</span></td></tr><tr id="headerTableRow3"><td></td></tr></table></div><div id="mainSection"><div id="mainBody"><div id="allHistory" class="saveHistory" onsave="saveAll()" onload="loadAll()"></div><p>The most common mistake made by developers using threadpool is to leave a worker thread in a dirty state after executing a callback function.</p><p>The application verifier helps detect these subtle errors, and helps in the development of a robust application.</p><p>The verifier hooks into all threadpool APIs that execute a callback (Work, Timer, Wait and I/O). It then substitutes its own contexts and parameter while encapsulating the users original data. The callback is then executed using the original context and parameters. The Verifier then compares the thread state before and after and generates warning and error messages if it differs.</p><p>The following state is checked for changes.</p><ul><li class="unordered">
						Thread priority<br /><br /></li><li class="unordered">
						Thread affinity<br /><br /></li><li class="unordered">
						Orphaned critical sections<br /><br /></li><li class="unordered">
						Unclosed window resource<br /><br /></li><li class="unordered">
						Unprocessed messages in queue (window messages, etc)<br /><br /></li></ul><p>The Application Verifier also checks for API misuse.</p><p>Following is a list of verifier stops that may occur when running the threadpool checks against a solution or project on different platforms: </p><h3 class="subHeading"></h3><table><tr><td colspan="1"><p><b>Error message</b></p></td><td colspan="1"><p><b>Stop code</b></p></td></tr><tr><td colspan="1"><p><a href="ddcab328-c35d-4640-b911-0dd8167bbe41.htm">The priority of this threadpool thread has been changed</a></p></td><td colspan="1"><p>700</p></td></tr><tr><td colspan="1"><p><a href="b60c043b-395a-4126-944d-8e90c2a729ae.htm">The affinity of this threadpool thread has been changed</a></p></td><td colspan="1"><p>701</p></td></tr><tr><td colspan="1"><p><a href="b3affe21-e8c1-4a14-8e1c-80f2626149d1.htm">Unprocessed msg in the msg pool of current thread</a></p></td><td colspan="1"><p>702</p></td></tr><tr><td colspan="1"><p><a href="a1daa5bc-cf9e-4ee9-bad9-1c3fbd5841b8.htm">Unclosed window belonged to the current thread</a></p></td><td colspan="1"><p>703</p></td></tr><tr><td colspan="1"><p><a href="99c39727-94db-443c-9544-e480dc7585b4.htm">ExitThread() called on a threadpool thread</a></p></td><td colspan="1"><p>704</p></td></tr><tr><td colspan="1"><p><a href="ecaeb0bb-24a1-4c46-a88f-7b5d3b54e034.htm">Thread is in impersonation state when it's returned to a threadpool thread.</a></p></td><td colspan="1"><p>705</p></td></tr><tr><td colspan="1"><p><a href="a0bafea7-0552-45b7-ac14-5a64971d2482.htm">The parameters for the timer object are inconsistent</a></p></td><td colspan="1"><p>709</p></td></tr><tr><td colspan="1"><p><a href="de567e98-5036-44f3-8436-3fde8cf36e66.htm">A function which requires persistent thread is called within the callback</a></p></td><td colspan="1"><p>706</p></td></tr><tr><td colspan="1"><p><a href="32b86592-31ae-4e52-8fe9-bc80adff928a.htm">Thread is in dirty transaction state</a></p></td><td colspan="1"><p>707</p></td></tr><tr><td colspan="1"><p><a href="469395e0-3747-44dd-9009-096ef0b53b3b.htm">This threadpool state has unbalanced CoInit and CoUnInit calls</a></p></td><td colspan="1"><p>708</p></td></tr><tr><td colspan="1"><p><a href="53b8a721-6e0a-406d-b089-cef9c6e7edb0.htm">The loader lock has been held by the threadpool thread within the callback .</a></p></td><td colspan="1"><p>70A</p></td></tr><tr><td colspan="1"><p><a href="ef6d77b6-b688-49d2-a559-6250e22a9015.htm">The preferred language is set by the threadpool thread within the callback.</a></p></td><td colspan="1"><p>70B</p></td></tr><tr><td colspan="1"><p><a href="8d883fcf-434f-4666-9336-ff86dbe2aaf9.htm">The background priority is set by the threadpool thread within the callback.</a></p></td><td colspan="1"><p>70C</p></td></tr><tr><td><p><a href="c5e07cd7-ce1e-4075-bca2-28a65d291004.htm">TerminateThread() called on a threadpool thread</a></p></td><td><p>70D</p></td></tr></table><h2 class="heading">Properties</h2><div id="sectionSection0" class="section"><content xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"><p xmlns="">One property is available for the Threadpool tests and that is to turn on the AsynchCheck. This will check asynchronous calls that require a persistent thread. The default is turned off. To turn it on, change the Boolean from false to true.</p></content></div><!--[if gte IE 5]>
			<tool:tip element="languageFilterToolTip" avoidmouse="false"/>
		<![endif]--></div><div id="footer"><p></p><hr></hr><br /><br /></div></div></body></html>