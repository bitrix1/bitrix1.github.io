<html DIR="LTR" xmlns:MSHelp="http://msdn.microsoft.com/mshelp" xmlns:ddue="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:tool="http://www.microsoft.com/tooltip"><head><META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=Windows-1252"></META><META NAME="save" CONTENT="history"></META><title>Debugging Memory Errors</title><link rel="stylesheet" type="text/css" href="../local/Classic.css"></link><script src="../local/script.js"></script></head><body><div><input type="hidden" id="userDataCache" class="userDataStyle"></input><input type="hidden" id="hiddenScrollOffset"></input></div><img id="dropDownImage" style="display:none; height:0; width:0;" src="../local/drpdown.gif"></img><img id="dropDownHoverImage" style="display:none; height:0; width:0;" src="../local/drpdown_orange.gif"></img><img id="collapseImage" style="display:none; height:0; width:0;" src="../local/collapse.gif"></img><img id="expandImage" style="display:none; height:0; width:0;" src="../local/exp.gif"></img><img id="copyImage" style="display:none; height:0; width:0;" src="../local/copycode.gif"></img><img id="copyHoverImage" style="display:none; height:0; width:0;" src="../local/copycodeHighlight.gif"></img><div id="header"><table width="100%" id="topTable"><tr id="headerTableRow1"><td align="left"><span id="runningHeaderText"></span></td></tr><tr id="headerTableRow2"><td align="left"><span id="nsrTitle">Debugging Memory Errors</span></td></tr><tr id="headerTableRow3"><td></td></tr></table></div><div id="mainSection"><div id="mainBody"><div id="allHistory" class="saveHistory" onsave="saveAll()" onload="loadAll()"></div><p></p><h2 class="heading">The memory verifier debugger extension</h2><div id="sectionSection0" class="section"><content xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"><p xmlns=""> The virtual space operation log tracks all routines that modify the virtual space of a process in any way. These include VirtualAlloc, VirtualFree, MapViewOfFile, and UnmapViewOfFile.</p><p xmlns="">You can use the !avrf -vs Length extension command to display the last several records; Length specifies the number of records.</p><p xmlns="">You can use !avrf -vs -a Address to display all virtual space operations that affected the specified Address. For an allocation, it is sufficient that Address be contained in the allocated block. For a free, the exact address of the beginning of the region must be given.</p><p xmlns="">For each entry in the log, the following information is displayed:</p><p xmlns="">The function called </p><p xmlns="">The thread ID of the thread that called the routine </p><p xmlns="">The address involved in the call — this is the address that was returned by an allocation routine or that was passed to a free routine </p><p xmlns="">The size of the region involved in the call </p><p xmlns="">The type of memory operation (the AllocationType parameter) </p><p xmlns="">The type of protection requested </p><p xmlns="">The stack trace of the call </p></content><sections xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"><h3 class="subHeading" xmlns="">Examples</h3><div class="subSection" xmlns=""><content xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"><p xmlns=""> The most recent entries are displayed first.</p><p xmlns="">In the following example, the two most recent entries are displayed:</p><p xmlns="">0:001&gt; !avrf -vs 2</p><p xmlns="">VirtualFree (tid: 0xB4): addr:04bb0000 sz:00400000 op:8000 prot:0</p><p xmlns="">        00aa1ac2: verifier!VsLogCall+0x42</p><p xmlns="">        00aa19c1: verifier!AVrfpNtFreeVirtualMemory+0x30</p><p xmlns="">        68925d17: kernel32!VirtualFreeEx+0x35</p><p xmlns="">        6892611c: kernel32!VirtualFree+0x13</p><p xmlns="">        75ef6525: mshtml+0x116525</p><p xmlns="">        75ef68af: mshtml+0x1168AF</p><p xmlns="">        6a20787c: ntdll!LdrpCallInitRoutine+0x14</p><p xmlns="">        6a211c6f: ntdll!LdrUnloadDll+0x39A</p><p xmlns="">        689275c1: kernel32!FreeLibrary+0x3B</p><p xmlns="">        77b22d69: ole32!CoQueryReleaseObject+0x1E6</p><p xmlns="">        77b02bd2: ole32!SetErrorInfo+0x1ED</p><p xmlns="">VirtualFree (tid: 0xB4): addr:04bb0000 sz:00001000 op:4000 prot:0</p><p xmlns="">        00aa1ac2: verifier!VsLogCall+0x42</p><p xmlns="">        00aa19c1: verifier!AVrfpNtFreeVirtualMemory+0x30</p><p xmlns="">        68925d17: kernel32!VirtualFreeEx+0x35</p><p xmlns="">        6892611c: kernel32!VirtualFree+0x13</p><p xmlns="">        75ef65ae: mshtml+0x1165AE</p><p xmlns="">        75ef68af: mshtml+0x1168AF</p><p xmlns="">        6a20787c: ntdll!LdrpCallInitRoutine+0x14</p><p xmlns="">        6a211c6f: ntdll!LdrUnloadDll+0x39A</p><p xmlns="">        689275c1: kernel32!FreeLibrary+0x3B</p><p xmlns="">        77b22d69: ole32!CoQueryReleaseObject+0x1E6</p><p xmlns="">        77b02bd2: ole32!SetErrorInfo+0x1ED</p><p xmlns="">It can be seen from the output that thread 0xB4 first decommitted a page and then released the entire virtual region.</p><p xmlns="">Here is a display of all operations affecting the address 0x4BB1000:</p><p xmlns="">0:001&gt; !avrf -vs -a 4bb1000</p><p xmlns="">Searching in vspace log for address 04bb1000 ...</p><p xmlns="">VirtualFree (tid: 0xB4): addr:04bb0000 sz:00400000 op:8000 prot:0</p><p xmlns="">        00aa1ac2: verifier!VsLogCall+0x42</p><p xmlns="">        00aa19c1: verifier!AVrfpNtFreeVirtualMemory+0x30</p><p xmlns="">        68925d17: kernel32!VirtualFreeEx+0x35</p><p xmlns="">        6892611c: kernel32!VirtualFree+0x13</p><p xmlns="">        75ef6525: mshtml+0x116525</p><p xmlns="">        75ef68af: mshtml+0x1168AF</p><p xmlns="">        6a20787c: ntdll!LdrpCallInitRoutine+0x14</p><p xmlns="">        6a211c6f: ntdll!LdrUnloadDll+0x39A</p><p xmlns="">        689275c1: kernel32!FreeLibrary+0x3B</p><p xmlns="">        77b22d69: ole32!CoQueryReleaseObject+0x1E6</p><p xmlns="">        77b02bd2: ole32!SetErrorInfo+0x1ED</p><p xmlns="">VirtualFree (tid: 0xB4): addr:04bb1000 sz:00001000 op:4000 prot:0</p><p xmlns="">        00aa1ac2: verifier!VsLogCall+0x42</p><p xmlns="">        00aa19c1: verifier!AVrfpNtFreeVirtualMemory+0x30</p><p xmlns="">        68925d17: kernel32!VirtualFreeEx+0x35</p><p xmlns="">        6892611c: kernel32!VirtualFree+0x13</p><p xmlns="">        75ef65ae: mshtml+0x1165AE</p><p xmlns="">        75ef68af: mshtml+0x1168AF</p><p xmlns="">        6a20787c: ntdll!LdrpCallInitRoutine+0x14</p><p xmlns="">        6a211c6f: ntdll!LdrUnloadDll+0x39A</p><p xmlns="">        689275c1: kernel32!FreeLibrary+0x3B</p><p xmlns="">        77b22d69: ole32!CoQueryReleaseObject+0x1E6</p><p xmlns="">        77b02bd2: ole32!SetErrorInfo+0x1ED</p><p xmlns="">VirtualAlloc (tid: 0xB4): addr:04bb0000 sz:00010000 op:1000 prot:4</p><p xmlns="">        00aa1ac2: verifier!VsLogCall+0x42</p><p xmlns="">        00aa1988: verifier!AVrfpNtAllocateVirtualMemory+0x37</p><p xmlns="">        68925ca3: kernel32!VirtualAllocEx+0x61</p><p xmlns="">        68926105: kernel32!VirtualAlloc+0x16</p><p xmlns="">        75ef63f3: mshtml+0x1163F3</p><p xmlns="">VirtualAlloc (tid: 0xB4): addr:04bb0000 sz:00400000 op:2000 prot:4</p><p xmlns="">        00aa1ac2: verifier!VsLogCall+0x42</p><p xmlns="">        00aa1988: verifier!AVrfpNtAllocateVirtualMemory+0x37</p><p xmlns="">        68925ca3: kernel32!VirtualAllocEx+0x61</p><p xmlns="">        68926105: kernel32!VirtualAlloc+0x16</p><p xmlns="">        75ef63d9: mshtml+0x1163D9</p><p xmlns="">To read this, remember that the entries are dumped starting with the most recent one. Thus, this log shows that thread 0xB4 allocated a large region in which it committed a page. Later it decommitted the page, and then released the entire virtual region.</p></content></div></sections></div><!--[if gte IE 5]>
			<tool:tip element="languageFilterToolTip" avoidmouse="false"/>
		<![endif]--></div><div id="footer"><p></p><hr></hr><br /><br /></div></div></body></html>